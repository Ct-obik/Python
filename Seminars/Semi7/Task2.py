# Планеты вращаются вокруг звезд по эллиптическим орбитам. Назовем самой далекой
# планетой ту, орбита которой имеет самую большую площадь. Напишите функцию
# find_farthest_orbit(list_of_orbits), которая среди списка орбит планет найдет ту,
# по которой вращается самая далекая планета. Круговые орбиты не учитывайте: вы знаете,
# что у вашей звезды таких планет нет, зато искусственные спутники были были запущены
# на круговые орбиты. Результатом функции должен быть кортеж, содержащий длины полуосей
# эллипса орбиты самой далекой планеты. Каждая орбита представляет из себя кортеж
# из пары чисел - полуосей ее эллипса. Площадь эллипса вычисляется по формуле
# S = pi*a*b, где a и b - длины полуосей эллипса. При решении задачи используйте
# списочные выражения. Подсказка: проще всего будет найти эллипс в два шага: сначала
# вычислить самую большую площадь эллипса, а затем найти и сам эллипс, имеющий такую площадь.
# Гарантируется, что самая далекая планета ровно одна

# [(1, 2), (4, 4), (3, 2)] -> (3, 2)

list_of_orbits = [(3, 3), (4, 4), (5, 5), (2, 3), (7, 1), (4, 5)]


def find_farthest_orbit(list_of_orbits):
    list_of_orbits = list(filter(lambda x: x[0] != x[1], list_of_orbits))
    s = []
    for t in list_of_orbits:
        s.append(t[0] * t[1])
    res = s.index(max(s))
    return list_of_orbits[res]


print(find_farthest_orbit(list_of_orbits))

# решение 2


def find_farthest_orbit(lst: list[tuple]):
    return max(lst, key= lambda y: (y[0] != y[1], y[0] * y[1]))
# find_farthest_orbit = lambda x: max(x, key= lambda y: (y[0] != y[1], y[0] * y[1]))    - или всё в одну строку


print(find_farthest_orbit(list_of_orbits))
